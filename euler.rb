def problem_1(ceiling)
  sum = 0
  1.upto(ceiling) do |n|
    sum += n if n % 3 == 0 or n % 5 == 0
  end
  return sum
end

def problem_2(ceiling)
  sum = 0
  fib = [1, 1]
  while true
    n = fib[fib.length - 1] + fib[fib.length - 2]
    return sum if n > ceiling

    sum += n if n % 2 == 0 
    fib.push(n)
    fib.shift
  end
end

def problem_3(n)
  2.upto(n ** 0.5) do |i|
    return [i, problem_3(n/i)].max if n % i == 0
  end
  return n
end

def problem_4(min_factor, max_factor)
  # Unoptimized.
  max_palindrome = 0
  max_factor.downto(min_factor) do |x|
    x.downto(min_factor) do |y|
      product = x * y
      if product.to_s == product.to_s.reverse and product > max_palindrome
        max_palindrome = product
      end
    end
  end
  return max_palindrome
end

def problem_5(max_divisor)
  # Unoptimized.
  number = 0
  number_found = false
  while not number_found
    number += max_divisor
    number_found = true
    2.upto(max_divisor) do |divisor|
      if number % divisor != 0
        number_found = false
        break
      end
    end
  end
  return number
end

def problem_6(ceiling)
  range = 1..ceiling
  return range.inject(:+) ** 2 -
    range.inject(0) { |sum, element| sum + element ** 2 }
end

def problem_7(n)
  # Unoptimized.
  count = 0
  x = 1
  while count < n
    x += 1
    count += 1 if x == problem_3(x)
  end
  return x
end

def problem_8(n)
  str_n = n.to_s
  digits = str_n.slice!(0..4).split("").map(&:to_i)
  max_product = current_product = digits.inject(:*)

  str_n.chars do |digit|
    digits.push(digit.to_i)
    if digits[0] == 0
      current_product = digits[1...digits.count].inject(:*)
    else
      current_product = current_product / digits[0] * digits[-1]
    end
    digits.shift
    max_product = [max_product, current_product].max
  end
  return max_product
end

def problem_9(n)
  1.upto(n / 3) do |a|
    (a + 1).upto(n / 2) do |b|
      c = n - a - b
      return a * b * c if a ** 2 + b ** 2 == c ** 2
    end
  end
end

def problem_10(n)
  sieve = (0..n).to_a
  sieve[0] = sieve[1] = nil

  # p == 2, allows for 2 * p step optimization
  (4).step(n, 2) {|i| sieve[i] = nil}
  sieve.each do |p|
    next if p.nil?
    break if p ** 2 > n
    (p ** 2).step(n, 2 * p) {|i| sieve[i] = nil}
  end
  sieve.compact!
  return sieve.inject(:+)
end

def problem_13(number_list)
  return number_list.inject(:+).to_s[0, 10]
end

def collatz_path_length(n)
  if n <= 0
    return nil
  elsif n == 1
    return 1
  end

  length = 1
  while n != 1
    n % 2 == 0 ? n /= 2 : n = 3 * n + 1
    length += 1
  end
  return length
end

def problem_14(n)
  max_length = 0
  max_i = nil
  1.upto(n - 1) do |i|
    current_length = collatz_path_length(i)
    if current_length > max_length
      max_length = current_length
      max_i = i
    end
  end
  return max_i
end

class Integer
  # For problem 15!
  def factorial
    return self == 0 ? 1 : (1..self).inject(:*)
  end
end

def problem_15(length, width)
  # (length + width) choose width == (length + width) choose length
  return (length + width).factorial / (length.factorial * width.factorial)
end

def problem_16(n)
  return (2 ** n).to_s.split("").map(&:to_i).inject(:+)
end


if __FILE__ == $0
  puts "Problem 1: #{problem_1(999)}"
  puts "Problem 2: #{problem_2(4000000)}"
  puts "Problem 3: #{problem_3(600851475143)}"
  puts "Problem 4: #{problem_4(100, 999)}"
  puts "Problem 5: #{problem_5(20)}"
  puts "Problem 6: #{problem_6(100)}"
  puts "Problem 7: #{problem_7(10001)}"
  puts "Problem 8: #{problem_8(("7316717653133062491922511967442657474235534" +
    "91949349698352031277450632623957831801698480186947885184385861560789112" +
    "94949545950173795833195285320880551112540698747158523863050715693290963" +
    "29522744304355766896648950445244523161731856403098711121722383113622298" +
    "93423380308135336276614282806444486645238749303589072962904915604407723" +
    "90713810515859307960866701724271218839987979087922749219016997208880937" +
    "76657273330010533678812202354218097512545405947522435258490771167055601" +
    "36048395864467063244157221553975369781797784617406495514929086256932197" +
    "84686224828397224137565705605749026140797296865241453510047482166370484" +
    "40319989000889524345065854122758866688116427171479924442928230863465674" +
    "81391912316282458617866458359124566529476545682848912883142607690042242" +
    "19022671055626321111109370544217506941658960408071984038509624554443629" +
    "81230987879927244284909188845801561660979191338754992005240636899125607" +
    "17606058861164671094050775410022569831552000559357297257163626956188267" +
    "0428252483600823257530420752963450").to_i)}"
  puts "Problem 9: #{problem_9(1000)}"
  puts "Problem 10: #{problem_10(2000000)}"
  # Problem 11 is missing!
  # Problem 12 is missing!
  puts "Problem 13: #{problem_13([
    37107287533902102798797998220837590246510135740250,
    46376937677490009712648124896970078050417018260538,
    74324986199524741059474233309513058123726617309629,
    91942213363574161572522430563301811072406154908250,
    23067588207539346171171980310421047513778063246676,
    89261670696623633820136378418383684178734361726757,
    28112879812849979408065481931592621691275889832738,
    44274228917432520321923589422876796487670272189318,
    47451445736001306439091167216856844588711603153276,
    70386486105843025439939619828917593665686757934951,
    62176457141856560629502157223196586755079324193331,
    64906352462741904929101432445813822663347944758178,
    92575867718337217661963751590579239728245598838407,
    58203565325359399008402633568948830189458628227828,
    80181199384826282014278194139940567587151170094390,
    35398664372827112653829987240784473053190104293586,
    86515506006295864861532075273371959191420517255829,
    71693888707715466499115593487603532921714970056938,
    54370070576826684624621495650076471787294438377604,
    53282654108756828443191190634694037855217779295145,
    36123272525000296071075082563815656710885258350721,
    45876576172410976447339110607218265236877223636045,
    17423706905851860660448207621209813287860733969412,
    81142660418086830619328460811191061556940512689692,
    51934325451728388641918047049293215058642563049483,
    62467221648435076201727918039944693004732956340691,
    15732444386908125794514089057706229429197107928209,
    55037687525678773091862540744969844508330393682126,
    18336384825330154686196124348767681297534375946515,
    80386287592878490201521685554828717201219257766954,
    78182833757993103614740356856449095527097864797581,
    16726320100436897842553539920931837441497806860984,
    48403098129077791799088218795327364475675590848030,
    87086987551392711854517078544161852424320693150332,
    59959406895756536782107074926966537676326235447210,
    69793950679652694742597709739166693763042633987085,
    41052684708299085211399427365734116182760315001271,
    65378607361501080857009149939512557028198746004375,
    35829035317434717326932123578154982629742552737307,
    94953759765105305946966067683156574377167401875275,
    88902802571733229619176668713819931811048770190271,
    25267680276078003013678680992525463401061632866526,
    36270218540497705585629946580636237993140746255962,
    24074486908231174977792365466257246923322810917141,
    91430288197103288597806669760892938638285025333403,
    34413065578016127815921815005561868836468420090470,
    23053081172816430487623791969842487255036638784583,
    11487696932154902810424020138335124462181441773470,
    63783299490636259666498587618221225225512486764533,
    67720186971698544312419572409913959008952310058822,
    95548255300263520781532296796249481641953868218774,
    76085327132285723110424803456124867697064507995236,
    37774242535411291684276865538926205024910326572967,
    23701913275725675285653248258265463092207058596522,
    29798860272258331913126375147341994889534765745501,
    18495701454879288984856827726077713721403798879715,
    38298203783031473527721580348144513491373226651381,
    34829543829199918180278916522431027392251122869539,
    40957953066405232632538044100059654939159879593635,
    29746152185502371307642255121183693803580388584903,
    41698116222072977186158236678424689157993532961922,
    62467957194401269043877107275048102390895523597457,
    23189706772547915061505504953922979530901129967519,
    86188088225875314529584099251203829009407770775672,
    11306739708304724483816533873502340845647058077308,
    82959174767140363198008187129011875491310547126581,
    97623331044818386269515456334926366572897563400500,
    42846280183517070527831839425882145521227251250327,
    55121603546981200581762165212827652751691296897789,
    32238195734329339946437501907836945765883352399886,
    75506164965184775180738168837861091527357929701337,
    62177842752192623401942399639168044983993173312731,
    32924185707147349566916674687634660915035914677504,
    99518671430235219628894890102423325116913619626622,
    73267460800591547471830798392868535206946944540724,
    76841822524674417161514036427982273348055556214818,
    97142617910342598647204516893989422179826088076852,
    87783646182799346313767754307809363333018982642090,
    10848802521674670883215120185883543223812876952786,
    71329612474782464538636993009049310363619763878039,
    62184073572399794223406235393808339651327408011116,
    66627891981488087797941876876144230030984490851411,
    60661826293682836764744779239180335110989069790714,
    85786944089552990653640447425576083659976645795096,
    66024396409905389607120198219976047599490197230297,
    64913982680032973156037120041377903785566085089252,
    16730939319872750275468906903707539413042652315011,
    94809377245048795150954100921645863754710598436791,
    78639167021187492431995700641917969777599028300699,
    15368713711936614952811305876380278410754449733078,
    40789923115535562561142322423255033685442488917353,
    44889911501440648020369068063960672322193204149535,
    41503128880339536053299340368006977710650566631954,
    81234880673210146739058568557934581403627822703280,
    82616570773948327592232845941706525094512325230608,
    22918802058777319719839450180888072429661980811197,
    77158542502016545090413245809786882778948721859617,
    72107838435069186155435662884062257473692284509516,
    20849603980134001723930671666823555245252804609722,
    53503534226472524250874054075591789781264330331690
  ])}"
  puts "Problem 14: #{problem_14(1000000)}"
  puts "Problem 15: #{problem_15(20, 20)}"
  puts "Problem 16: #{problem_16(1000)}"
end
